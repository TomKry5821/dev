[[tls.certificates]]
certFile = "/etc/certs/localhost.pem"
keyFile = "/etc/certs/localhost-key.pem"

[tls.options]
[tls.options.TLSOptions]
minVersion = "VersionTLS12"

[http.routers]
[http.routers.AppointmentPublicRouter]
rule = "Host(`localhost`) && (Path(`/appointment/api/appointments`) && Method(`GET`))"
entryPoints = ["websecure"]
service = "reservation"
middlewares = ["rate-limit"]
[http.routers.AppointmentPublicRouter.tls]
options = "TLSOptions"

[http.routers.AppointmentSecureRouter]
rule = "Host(`localhost`) && (Path(`/appointment/api/appointments`) && Method(`POST`) || (PathPrefix(`/appointment/api/appointments/`) && (Method(`PUT`) || Method(`DELETE`))))"
entryPoints = ["websecure"]
service = "reservation"
middlewares = ["rate-limit", "jwt-auth"]
[http.routers.AppointmentSecureRouter.tls]
options = "TLSOptions"

[http.routers.ReservationPublicRouter]
rule = "Host(`localhost`) && (Path(`/reservation/api/reservations`) && Method(`POST`) || (PathPrefix(`/reservation/api/reservations/`) && (Method(`GET`) || Method(`PUT`) || Method(`DELETE`))))"
entryPoints = ["websecure"]
service = "reservation"
middlewares = ["rate-limit"]
[http.routers.ReservationPublicRouter.tls]
options = "TLSOptions"

[http.routers.ReservationSecureRouter]
rule = "Host(`localhost`) && (Path(`/reservation/api/reservations`) && Method(`GET`) || PathPrefix(`/reservation/api/reservations/`) && Method(`PATCH`)) || PathPrefix(`/reservation/api/employee/reservations`) && (Method(`POST`) || Method(`PUT`))"
entryPoints = ["websecure"]
service = "reservation"
middlewares = ["rate-limit", "jwt-auth"]
[http.routers.ReservationSecureRouter.tls]
options = "TLSOptions"

[http.routers.TreatmentPublicRouter]
rule = "Host(`localhost`) && (Path(`/treatment/api/treatments`) && Method(`GET`))"
entryPoints = ["websecure"]
service = "reservation"
middlewares = ["rate-limit"]
[http.routers.TreatmentPublicRouter.tls]
options = "TLSOptions"

[http.routers.TreatmentSecureRouter]
rule = "Host(`localhost`) && (Path(`/treatment/api/treatments`) && Method(`POST`) || (PathPrefix(`/treatment/api/treatments/`) && (Method(`PUT`) || Method(`DELETE`))))"
entryPoints = ["websecure"]
service = "reservation"
middlewares = ["rate-limit", "jwt-auth"]
[http.routers.TreatmentSecureRouter.tls]
options = "TLSOptions"

[http.routers.AuthRouter]
rule = "PathPrefix(`/realms/dev`)"
entryPoints = ["websecure"]
service = "keycloak"
middlewares = ["rate-limit"]
[http.routers.AuthRouter.tls]
options = "TLSOptions"

[http.routers.DashboardRouter]
rule = "(PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
service = "api@internal"
middlewares = ["auth"]
entryPoints = ["websecure"]
[http.routers.DashboardRouter.tls]
options = "TLSOptions"

[http.routers.MonitoringRouter]
rule = "PathPrefix(`/grafana`)"
service = "grafana"
entryPoints = ["websecure"]
[http.routers.MonitoringRouter.tls]
options = "TLSOptions"

[http.middlewares]
[http.middlewares.rate-limit.rateLimit]
average = 10
burst = 20

[http.middlewares.jwt-auth.forwardAuth]
address = "http://keycloak:8080/realms/dev/protocol/openid-connect/userinfo"
trustForwardHeader = false

[http.middlewares.auth.basicAuth]
users = ["admin:$2y$10$DOhFW0WPz3tz83xCUvGpWuMCSnu2A3FKJYkZBFkMq6zkboRYqgf7e"]

[http.services]
[http.services.reservation.loadBalancer]
[[http.services.reservation.loadBalancer.servers]]
url = "http://reservation:8080"
[http.services.reservation.loadBalancer.healthCheck]
path = "/actuator/health/custom"
interval = "10s"
timeout = "3s"

[http.services.notification.loadBalancer]
[[http.services.notification.loadBalancer.servers]]
url = "http://notification:8081"
[http.services.notification.loadBalancer.healthCheck]
path = "/actuator/health/custom"
interval = "10s"
timeout = "3s"

[http.services.keycloak.loadBalancer]
[[http.services.keycloak.loadBalancer.servers]]
url = "http://keycloak:8080"
[http.services.keycloak.loadBalancer.healthCheck]
hostname = "keycloak"
port = "9000"
path = "health"
interval = "10s"
timeout = "3s"

[http.services.grafana.loadBalancer]
[[http.services.grafana.loadBalancer.servers]]
url = "http://grafana:3000"
[http.services.grafana.loadBalancer.healthCheck]
path = "/api/health"
interval = "10s"
timeout = "3s"
